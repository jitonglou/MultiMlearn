colSums(df_prob) %>% head
load("C://DW Projects/Wu_MutSig/workspaces/TCGA_data/LUAD.RData") # mrna, mut
flag = rowSums(luad_mut) > 50
df = luad_mut[flag, ] %>%
scale(center=TRUE, scale=TRUE)
df_prob = luad_mut[flag, ] %>%
apply(1, function(x){x/sum(x)}) %>%
t %>%
scale(center=TRUE, scale=TRUE)
rm(res_prob.km)
fviz_nbclust(t(df_prob), kmeans, method = "gap_stat")
res_prob.km <- eclust(t(df_prob), "kmeans", nstart = 25)
res_prob.km$clust_plot
res_prob.km$nbclust
df.prob = df_prob
rm(df_prob)
res.km.prob = res_prob.km
rm(res_prob.km)
rm(p_res_prob)
load("C://DW Projects/Wu_MutSig/workspaces/TCGA_data/LUSC.RData") # mrna, mut
flag = rowSums(lusc_mut) > 50
df = lusc_mut[flag, ] %>%
scale(center=TRUE, scale=TRUE)
df.prob = lusc_mut[flag, ] %>%
apply(1, function(x){x/sum(x)}) %>%
t %>%
scale(center=TRUE, scale=TRUE)
fviz_nbclust(t(df.prob), kmeans, method = "gap_stat") # kmeans, hcut
my_data <- scale(USArrests)
fviz_nbclust(my_data, kmeans, method = "gap_stat")
rm(my_data)
load("C://DW Projects/Wu_MutSig/workspaces/TCGA_data/BLCA.RData") # mrna, mut
flag = rowSums(blca_mut) > 50
df = blca_mut[flag, ]
df.prob = df %>%
apply(1, function(x){x/sum(x)}) %>%
t
View(df.prob)
df.prob[1,]
fviz_nbclust(t(df.prob), kmeans, method = "gap_stat") # kmeans, hcut
?eclust
res.km.prob <- eclust(t(df.prob), "kmeans")
res.km.prob$nbclust
library(caret)
y = res.km.prob$cluster
fviz_nbclust(df.prob, kmeans, method = "gap_stat")
res.km.prob <- eclust(df.prob, "kmeans")
res.km.prob$nbclust
set.seed(2021)
# Optimal number of clusters for k-means
fviz_nbclust(df.prob, kmeans, method = "gap_stat") # kmeans, hcut
# Enhanced k-means clustering
res.km.prob <- eclust(df.prob, "kmeans") # eclust(df, "kmeans", k = 4)
res.km.prob$nbclust
y = res.km.prob$cluster
set.seed(2021)
idx = sample(x = 1:nrow(df.prob), size = 0.8*nrow(df.prob), replace = FALSE)
y = res.km.prob$cluster
x = df.prob
x = blca_mrna[flag, ]
x %>% dim
x = t(blca_mrna)[flag, ]
x %>% dim
y_train = y[idx]
y_test = y[-idx]
x_train = x[idx,]
x_test = x[-idx,]
x_test %>% dim
normalization = preProcess(x_train)
normalization$mean %>% length
normalization$mean %>% head
x_train_df = normalization %>%
predict(x_train) %>%
as.data.frame()
subsets = c(10, 100)
subsets = c(10, 100)
ctrl <- rfeControl(functions = lmFuncs,
method = "repeatedcv",
repeats = 3,
verbose = FALSE)
set.seed(2021)
lmProfile <- rfe(x, y,
sizes = subsets,
rfeControl = ctrl)
?rfeControl
subsets = c(10, 100)
ctrl <- rfeControl(functions = lmFuncs,
method = "repeatedcv",
number = 3,
repeats = 3,
verbose = FALSE)
set.seed(2021)
lmProfile <- rfe(x, y,
sizes = subsets,
rfeControl = ctrl)
table(y)
set.seed(2021)
lmProfile <- rfe(x_train_df, y_train,
sizes = subsets,
rfeControl = ctrl)
set.seed(2021)
lmProfile <- rfe(x_train_df[1:1000,], y_train,
sizes = subsets,
rfeControl = ctrl)
set.seed(2021)
lmProfile <- rfe(x_train_df[,1:1000], y_train,
sizes = subsets,
rfeControl = ctrl)
View(x_train_df)
xx = x_train_df[,1:1000]
set.seed(2021)
lmProfile <- rfe(xx, y_train,
sizes = subsets,
rfeControl = ctrl)
set.seed(2021)
lmProfile <- rfe(xx, factor(y_train),
sizes = subsets,
rfeControl = ctrl)
subsets = c(1:5)
xx = x_train_df[,1:100]
set.seed(2021)
lmProfile <- rfe(xx, factor(y_train),
sizes = subsets,
rfeControl = ctrl)
subsets = c(1:5)
ctrl <- rfeControl(functions = lmFuncs,
method = "repeatedcv",
number = 5,
repeats = 5,
verbose = TRUE)
xx = x_train_df[,1:100]
set.seed(2021)
lmProfile <- rfe(xx, factor(y_train),
sizes = subsets,
rfeControl = ctrl)
subsets = c(1:2)
ctrl <- rfeControl(functions = lmFuncs,
method = "repeatedcv",
number = 5,
repeats = 5,
verbose = FALSE)
xx = x_train_df[,1:5]
set.seed(2021)
lmProfile <- rfe(xx, y_train,
sizes = subsets,
rfeControl = ctrl)
lmProfile
subsets = c(1:2)
ctrl <- rfeControl(functions = lmFuncs,
method = "repeatedcv",
number = 5,
repeats = 5,
verbose = FALSE)
xx = x_train_df[,1:50]
set.seed(2021)
lmProfile <- rfe(xx, y_train,
sizes = subsets,
rfeControl = ctrl)
?rfe
y_train %>% factor %>% head
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.align = "center")
library(tidyr) # pivot_longer
library(dplyr)
library(ggplot2)
library(factoextra) # eclust(), http://www.sthda.com/english/wiki/factoextra-r-package-easy-multivariate-data-analyses-and-elegant-visualization
library(caret)
load("C://DW Projects/Wu_MutSig/workspaces/TCGA_data/BLCA.RData") # mrna, mut
flag = rowSums(blca_mut) > 50
df = blca_mut[flag, ]
df.prob = df %>%
apply(1, function(x){x/sum(x)}) %>%
t
set.seed(2021)
# Optimal number of clusters for k-means
fviz_nbclust(df.prob, kmeans, method = "gap_stat") # kmeans, hcut
# Enhanced k-means clustering
res.km.prob <- eclust(df.prob, "kmeans") # eclust(df, "kmeans", k = 4)
res.km.prob$nbclust
data(PimaIndiansDiabetes)
set.seed(2021)
idx = sample(x = 1:nrow(df.prob), size = 0.8*nrow(df.prob), replace = FALSE)
y = factor(res.km.prob$cluster)
table(y)
x = t(blca_mrna)[flag, ]
y_train = y[idx]
y_test = y[-idx]
x_train = x[idx,]
x_test = x[-idx,]
normalization = preProcess(x_train)
x_train_df = normalization %>%
predict(x_train) %>%
as.data.frame()
subsets = c(1:2)
ctrl <- rfeControl(
functions = rfFuncs,
method = "repeatedcv",
number = 5,
repeats = 5,
classProbs = TRUE,
verbose = FALSE
)
subsets = c(1:2)
ctrl <- rfeControl(
functions = rfFuncs,
method = "repeatedcv",
number = 5,
repeats = 5,
verbose = FALSE
)
xx = x_train_df[,1:50]
set.seed(2021)
results = rfe(
xx, y_train,
sizes = subsets,
rfeControl = ctrl
)
results
print(results)
predictors(results)
# plot the results
plot(results, type=c("g", "o"))
results$fit
subsets = c(10,100)
ctrl <- rfeControl(
functions = rfFuncs,
method = "repeatedcv",
number = 3,
repeats = 3,
verbose = FALSE
)
xx = x_train_df[,1:1000]
set.seed(2021)
results = rfe(
xx, y_train,
sizes = subsets,
rfeControl = ctrl
)
print(results)
results$fit
set.seed(2021)
xx = x_train_df[,sample(1:nrow(x_train_df), 1000)]
set.seed(2021)
xx = x_train_df[,sample(1:ncol(x_train_df), 1000)]
results = rfe(
xx, y_train,
sizes = subsets,
rfeControl = ctrl
)
print(results)
results$fit
results
subsets = c(10,100, 1000, 10000)
ctrl <- rfeControl(
functions = rfFuncs,
method = "repeatedcv",
number = 3,
repeats = 3,
verbose = FALSE
)
set.seed(2021)
xx = x_train_df[,sample(1:ncol(x_train_df), ncol(x_train_df))]
results = rfe(
xx, y_train,
sizes = subsets,
rfeControl = ctrl
)
results
results$fit
results$variables
save(xx, y_train, ctrl, results, file="C://DW Projects/Wu_MutSig/workspaces/TCGA_data/ML_analysis_blca_rfe_rf.RData")
save(xx, y_train, ctrl, results, file="C://DW Projects/Wu_MutSig/workspaces/ML_analysis_blca_rfe_rf.RData")
plot(results, type=c("g", "o"))
load("C://DW Projects/Wu_MutSig/workspaces/TCGA_data/LUAD.RData") # mrna, mut
flag = rowSums(blca_mut) > 50
df = blca_mut[flag, ]
df.prob = df %>%
apply(1, function(x){x/sum(x)}) %>%
t
set.seed(2021)
# Optimal number of clusters for k-means
fviz_nbclust(df.prob, kmeans, method = "gap_stat") # kmeans, hcut
# Enhanced k-means clustering
res.km.prob <- eclust(df.prob, "kmeans") # eclust(df, "kmeans", k = 4)
res.km.prob$nbclust
set.seed(2021)
idx = sample(x = 1:nrow(df.prob), size = 0.8*nrow(df.prob), replace = FALSE)
y = factor(res.km.prob$cluster)
table(y)
load("C://DW Projects/Wu_MutSig/workspaces/TCGA_data/LUAD.RData") # mrna, mut
flag = rowSums(luad_mut) > 50
y.df = luad_mut[flag, ]
y.df.prob = df %>%
apply(1, function(x){x/sum(x)}) %>%
t
x.df = t(luad_mrna)[flag, ]
set.seed(2021)
# Optimal number of clusters for k-means
fviz_nbclust(y.df.prob, kmeans, method = "gap_stat") # kmeans, hcut
# Enhanced k-means clustering
res.km.prob <- eclust(y.df.prob, "kmeans") # eclust(df, "kmeans", k = 4)
res.km.prob$nbclust
response.df = luad_mut[flag, ]
response.df.prob = df %>%
apply(1, function(x){x/sum(x)}) %>%
t
feature.df = t(luad_mrna)[flag, ]
set.seed(2021)
idx = sample(x = 1:nrow(response.df.prob), size = 0.8*nrow(response.df.prob), replace = FALSE)
y = factor(res.km.prob$cluster)
table(y)
x = feature.df
load("C://DW Projects/Wu_MutSig/workspaces/TCGA_data/LUAD.RData") # mrna, mut
flag = rowSums(luad_mut) > 50
response.df = luad_mut[flag, ]
response.df.prob = response.df %>%
apply(1, function(x){x/sum(x)}) %>%
t
feature.df = t(luad_mrna)[flag, ]
set.seed(2021)
# Optimal number of clusters for k-means
fviz_nbclust(response.df.prob, kmeans, method = "gap_stat") # kmeans, hcut
# Enhanced k-means clustering
res.km.prob <- eclust(response.df.prob, "kmeans") # eclust(df, "kmeans", k = 4)
res.km.prob$nbclust
set.seed(2021)
idx = sample(x = 1:nrow(response.df.prob), size = 0.8*nrow(response.df.prob), replace = FALSE)
y = factor(res.km.prob$cluster)
table(y)
x = feature.df
y_train = y[idx]
y_test = y[-idx]
x_train = x[idx,]
x_test = x[-idx,]
normalization = preProcess(x_train)
x_train_df = normalization %>%
predict(x_train) %>%
as.data.frame()
subsets = c(10,100, 1000, 10000)
ctrl <- rfeControl(
functions = rfFuncs,
method = "repeatedcv",
number = 3,
repeats = 3,
verbose = FALSE
)
set.seed(2021)
xx = x_train_df[,sample(1:ncol(x_train_df), ncol(x_train_df))]
results = rfe(
xx, y_train,
sizes = subsets,
rfeControl = ctrl
)
results
results$fit
results
results$fit
?rfeControl
set.seed(2021)
xx = x_train_df[,sample(1:ncol(x_train_df), ncol(x_train_df))]
results = rfe(
xx, y_train,
metric = "Kappa",
sizes = subsets,
rfeControl = ctrl
)
results
results$fit
save(xx, y_train, ctrl, results, file="C://DW Projects/Wu_MutSig/workspaces/ML_analysis_luad_rfe_rf.RData")
load("C://DW Projects/Wu_MutSig/workspaces/TCGA_data/LUSC.RData") # mrna, mut
flag = rowSums(lusc_mut) > 50
response.df = lusc_mut[flag, ]
response.df.prob = response.df %>%
apply(1, function(x){x/sum(x)}) %>%
t
feature.df = t(lusc_mrna)[flag, ]
dim(feature.df)
correlationMatrix = cor(feature.df)
print(correlationMatrix)
highlyCorrelated = findCorrelation(correlationMatrix, cutoff=0.5)
is.na(correlationMatrix) %>% sum()
is.na(feature.df) %>% sum()
is.na(feature.df) %>% which.min() %>% head()
is.na(correlationMatrix) %>% which.min() %>% head()
is.na(correlationMatrix) %>% which.max() %>% head()
correlationMatrix[224,1]
correlationMatrix[224,2]
correlationMatrix[224,] %>% summary()
feature.df[,224] %>% summary
feature.df %>% dim
feature.df = t(lusc_mrna[rowSums(lusc_mrna)>0,])[flag, ]
feature.df %>% dim
feature.df = lusc_mrna[rowSums(lusc_mrna)>0,][, flag]
correlationMatrix = cor(t(feature.df))
rm(correlationMatrix)
correlationMatrix = cor(t(feature.df))
highlyCorrelated = findCorrelation(correlationMatrix, cutoff=0.5)
is.na(correlationMatrix) %>% which.max() %>% head()
feature.df[1927,] %>% summary
feature.df[1927,] %>% sum()
rownames(feature.df) %>% head
rownames(feature.df)[1927]
lusc_mrna["DEFT1P",] %>% sum
feature.df = lusc_mrna[, flag]
feature.df %>% apply(1, sd) %>% summary
aaa = feature.df %>% apply(1, sd)
sum(aaa == 0)
feature.df = feature.df[apply(feature.df, 1, sd) != 0, ]
correlationMatrix = cor(t(feature.df))
rm(correlationMatrix)
correlationMatrix = cor(t(feature.df))
highlyCorrelated = findCorrelation(correlationMatrix, cutoff=0.5)
rm(correlationMatrix)
set.seed(2021)
# Optimal number of clusters for k-means
fviz_nbclust(response.df.prob, kmeans, method = "gap_stat") # kmeans, hcut
# Enhanced k-means clustering
res.km.prob <- eclust(response.df.prob, "kmeans") # eclust(df, "kmeans", k = 4)
res.km.prob$nbclust
set.seed(2021)
idx = sample(x = 1:nrow(response.df.prob), size = 0.8*nrow(response.df.prob), replace = FALSE)
y = factor(res.km.prob$cluster)
table(y)
x = t(feature.df)
dim(x)
y_train = y[idx]
y_test = y[-idx]
x_train = x[idx,]
x_test = x[-idx,]
normalization = preProcess(x_train)
x_train_df = normalization %>%
predict(x_train) %>%
as.data.frame()
subsets = c(10,100, 1000, 10000)
ctrl <- rfeControl(
functions = rfFuncs,
method = "repeatedcv",
number = 3,
repeats = 3,
verbose = FALSE
)
set.seed(2021)
xx = x_train_df[,sample(1:ncol(x_train_df), ncol(x_train_df))]
results = rfe(
xx, y_train,
metric = "Kappa",
sizes = subsets,
rfeControl = ctrl
)
# summarize the results
results
results
results$fit
plot(results, type=c("g", "o"))
save(xx, y_train, ctrl, results, file="C://DW Projects/Wu_MutSig/workspaces/ML_analysis_lusc_rfe_rf.RData")
highlyCorrelated = feature.df %>%
t %>% corr %>%
findCorrelation(correlationMatrix, cutoff=0.5)
highlyCorrelated = feature.df %>%
t %>% cor %>%
findCorrelation(correlationMatrix, cutoff=0.5)
install.packages("icd")
install.packages("icd")
devtools::install_github("jackwasey/icd")
library(icd)
?comorbid
?comorbid_charlson
?charlson
load("C:/bios994/TRule_model/workspaces/TRule_EHR_OSUdata_forITR_v5.1.RData")
load("C:/bios994/TRule_model/workspaces/Extract features for ITR v5.1.RData")
View(pat_reward)
load("C:/bios994/TRule_model/workspaces/TRule_simdata_ITR_OVO_alltrts_wvf_s2_v2_nogrp/TRule_simdata_ITR_OVO_alltrts_wvf_s2_v2_nogrp_case1_seed0.RData")
table(simdata$cluster, simdata$treatment_opt)
load("C:/bios994/TRule_model/workspaces/TRule_simdata_ITR_OVO_alltrts_wvf_s2_v2_nogrp/TRule_simdata_ITR_OVO_alltrts_wvf_s2_v2_nogrp_case2_seed0.RData")
table(simdata$cluster, simdata$treatment_opt)
load("C:/bios994/TRule_model/workspaces/TRule_simdata_ITR_OVO_alltrts_wvf_s2_v2_nogrp/TRule_simdata_ITR_OVO_alltrts_wvf_s2_v2_nogrp_case3_seed0.RData")
table(simdata$cluster, simdata$treatment_opt)
load("C:/bios994/TRule_model/workspaces/TRule_simdata_ITR_OVO_alltrts_wvf_s2_v1_nogrp/TRule_simdata_ITR_OVO_alltrts_wvf_s2_v1_nogrp_case1_seed0.RData")
table(simdata$cluster, simdata$treatment_opt)
load("C:/bios994/TRule_model/workspaces/TRule_simdata_ITR_OVO_alltrts_wvf_s2_v1_nogrp/TRule_simdata_ITR_OVO_alltrts_wvf_s2_v1_nogrp_case2_seed0.RData")
table(simdata$cluster, simdata$treatment_opt)
load("C:/bios994/TRule_model/workspaces/TRule_simdata_ITR_OVO_alltrts_wvf_s2_v1_nogrp/TRule_simdata_ITR_OVO_alltrts_wvf_s2_v1_nogrp_case3_seed0.RData")
table(simdata$cluster, simdata$treatment_opt)
devtools::install_github("jitonglou/MultiMlearn")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("jitonglou/MultiMlearn")
devtools::install_github("jitonglou/MultiMlearn")
q()
devtools::install_github("jitonglou/MultiMlearn")
install.packages(ellipsis)
devtools::install_github("jitonglou/MultiMlearn")
install.packages("ellipsis")
devtools::install_github("jitonglou/MultiMlearn")
install.packages("curl")
install.packages("curl")
devtools::install_github("jitonglou/MultiMlearn")
setwd("C:/bios994/MyRpackages/MultiMlearn")
?MultiMlearn
??MultiMlearn
help(MultiMlearn)
?delta.true
??delta.true
?MultiMlearn::delta.true
library(MultiMlearn)
?MultiMlearn
??MultiMlearn
?simulate_data
